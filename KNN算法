import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
from sklearn.decomposition import PCA
from matplotlib.colors import ListedColormap
from sklearn import neighbors

x=pd.read_csv('irisTrainingSet.csv',header=None)
x_min,x_max=x.iloc[:,0].min()-0.5, x.iloc[:,0].max()+0.5
y_min,y_max=x.iloc[:,1].min()-0.5, x.iloc[:,1].max()+0.5

plt.figure(2,figsize=(8,6))#Creates a new figure
plt.clf()

#plot the training Pointplt.scatter(x.iloc[:,0], x.iloc[:,1], c=ây', edgecolor='k')
plt.scatter(x.iloc[:,0],x.iloc[:,1], c='y', edgecolor='k')
plt.xlabel('sepal length')
plt.ylabel('sepal width')

plt.xlim(x_min, x_max)
plt.ylim(y_min,y_max)
plt.xticks(())
plt.yticks(())

plt.show()


fig=plt.figure(1,figsize=(8,6))
ax=Axes3D(fig, elev=-150,azim=110)  #3D axes object
#*azim*     Azimuthal viewing angle (default -60) æ¹ä½è§?
#  *elev*   Elevation viewing angle (default 30) æ¬é«è§è§
x_reduced=PCA(n_components=3).fit_transform(x.iloc[:,:4])
      #Principal component analysis
ax.scatter(x_reduced[:,0],x_reduced[:,1],x_reduced[:,2])

ax.set_title("first three PCA directions")
ax.set_xlabel('1st eigenvector')
ax.w_xaxis.set_ticklabels([])
ax.set_ylabel("2nd eigenvector")
ax.w_yaxis.set_ticklabels([])
ax.set_zlabel("3rd eigenvector")
ax.w_zaxis.set_ticklabels([])

plt.show()

n_neighbors = 15
h = .02     # step size in the mesh

iris=pd.read_table('irisTrainingSet.txt', header=None)
x = iris.iloc[:, :2]
y = iris.iloc[:, -2]

# Create color maps
cmap_light = ListedColormap(['#FFAAAA', '#AAFFAA', '#AAAAFF'])
cmap_bold = ListedColormap(['#FF0000', '#00FF00', '#0000FF'])
for weights in ['uniform', 'distance']:
    clf = neighbors.KNeighborsClassifier(n_neighbors, weights=weights)
    clf.fit(x,y)
  
# Plot the decision boundary. For that, we will assign a color to each
# point in the mesh [x_min, x_max]x[y_min, y_max].
    x_min, x_max = x.iloc[:, 0].min() - 1, x.iloc[:, 0].max() + 1
    y_min, y_max = x.iloc[:, 1].min() - 1, x.iloc[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),np.arange(y_min, y_max, h))  
    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    plt.figure()
    plt.pcolormesh(xx, yy, Z,cmap=cmap_light)



# Plot also the training points
    plt.scatter(x.iloc[:, 0], x.iloc[:, 1], c=y, cmap=cmap_bold, edgecolor='k', s=20)
    plt.xlim(xx.min(), xx.max())
    plt.ylim(yy.min(), yy.max())
    plt.title("3-Class classification (k = %i, weights = '%s')" % (n_neighbors, weights))

plt.show()
